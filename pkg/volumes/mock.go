// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb-operator/pkg/volumes (interfaces: Modifier)
//
// Generated by this command:
//
//	mockgen -destination mock.go -package=volumes github.com/pingcap/tidb-operator/pkg/volumes Modifier
//

// Package volumes is a generated GoMock package.
package volumes

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockModifier is a mock of Modifier interface.
type MockModifier struct {
	ctrl     *gomock.Controller
	recorder *MockModifierMockRecorder
	isgomock struct{}
}

// MockModifierMockRecorder is the mock recorder for MockModifier.
type MockModifierMockRecorder struct {
	mock *MockModifier
}

// NewMockModifier creates a new mock instance.
func NewMockModifier(ctrl *gomock.Controller) *MockModifier {
	mock := &MockModifier{ctrl: ctrl}
	mock.recorder = &MockModifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModifier) EXPECT() *MockModifierMockRecorder {
	return m.recorder
}

// GetActualVolume mocks base method.
func (m *MockModifier) GetActualVolume(ctx context.Context, expect, current *v1.PersistentVolumeClaim) (*ActualVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActualVolume", ctx, expect, current)
	ret0, _ := ret[0].(*ActualVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActualVolume indicates an expected call of GetActualVolume.
func (mr *MockModifierMockRecorder) GetActualVolume(ctx, expect, current any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActualVolume", reflect.TypeOf((*MockModifier)(nil).GetActualVolume), ctx, expect, current)
}

// Modify mocks base method.
func (m *MockModifier) Modify(ctx context.Context, vol *ActualVolume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modify", ctx, vol)
	ret0, _ := ret[0].(error)
	return ret0
}

// Modify indicates an expected call of Modify.
func (mr *MockModifierMockRecorder) Modify(ctx, vol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockModifier)(nil).Modify), ctx, vol)
}

// ShouldModify mocks base method.
func (m *MockModifier) ShouldModify(ctx context.Context, actual *ActualVolume) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldModify", ctx, actual)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldModify indicates an expected call of ShouldModify.
func (mr *MockModifierMockRecorder) ShouldModify(ctx, actual any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldModify", reflect.TypeOf((*MockModifier)(nil).ShouldModify), ctx, actual)
}
